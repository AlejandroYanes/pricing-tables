// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Resume {
    id              String      @id @default(cuid())
    template        String
    title           String
    about           String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    educations      Education[]
    jobs            Job[]
    skills          Skill[]
    references      Reference[]
    languages       Language[]
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
    id              String      @id @default(cuid())
    location        String
    degree          String
    school          String
    startDate       DateTime
    endDate         DateTime
    toThePresent    Boolean     @default(false)
    createdAt       DateTime    @default(now())
    resumeId        String
    resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Job {
    id              String      @id @default(cuid())
    company         String
    role            String
    summary         String
    startDate       DateTime
    endDate         DateTime
    toThePresent    Boolean     @default(false)
    kpis            JobKpi[]
    resumeId        String
    resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model JobKpi {
    id              String      @id @default(cuid())
    summary         String
    createdAt       DateTime    @default(now())
    jobId           String
    job             Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Skill {
    id              String      @id @default(cuid())
    name            String
    years           Int
    level           Int
    createdAt       DateTime    @default(now())
    resumeId        String
    resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Reference {
    id              String      @id @default(cuid())
    name            String
    phone           String
    email           String
    position        String
    createdAt       DateTime    @default(now())
    resumeId        String
    resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Language {
    id              String      @id @default(cuid())
    name            String
    level           Int
    createdAt       DateTime    @default(now())
    resumeId        String
    resume          Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id              String   @id @default(cuid())
    sessionToken    String   @unique
    userId          String
    expires         DateTime
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    phone           String?
    address         String?
    website         String?
    accounts        Account[]
    sessions        Session[]
    resumes         Resume[]
}

model VerificationToken {
    identifier     String
    token          String   @unique
    expires        DateTime

    @@unique([identifier, token])
}
