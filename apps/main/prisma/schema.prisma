// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model PriceWidget {
    id                  String        @id @default(cuid())
    name                String
    template            String
    usesUnitLabel       Boolean       @default(false)
    unitLabel           String?
    color               String
    recommended         String?
    subscribeLabel      String
    freeTrialLabel      String
    checkoutSuccessUrl  String?
    checkoutCancelUrl   String?
    createdAt           DateTime      @default(now())
    products            Product[]
    callbacks           Callback[]
    checkoutRecords     CheckoutRecord[]
    userId              String
    user                User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id              String
    prices          Price[]
    isCustom        Boolean       @default(false)
    name            String?
    description     String?
    ctaLabel        String?
    ctaUrl          String?
    order           Int           @default(0)
    createdAt       DateTime      @default(now())
    mask            String
    features        Feature[]
    widgetId        String
    widget          PriceWidget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)

    @@id([id, widgetId])
}

model Price {
    id                  String
    hasFreeTrial        Boolean       @default(false)
    freeTrialDays       Int           @default(0)
    freeTrialEndAction  String?       @default("pause")
    order               Int           @default(0)
    createdAt           DateTime      @default(now())
    mask                String
    widgetId            String
    productId           String
    product             Product       @relation(fields: [productId, widgetId], references: [id, widgetId], onDelete: Cascade)

    @@id([id, widgetId])
}

model Feature {
    id              String
    name            String
    type            String
    value           String
    order           Int           @default(0)
    createdAt       DateTime      @default(now())
    productId       String
    widgetId        String
    product         Product       @relation(fields: [productId, widgetId], references: [id, widgetId], onDelete: Cascade)
    @@id([id, productId, widgetId])
}

model Callback {
    id              String        @id
    env             String
    url             String
    order           Int           @default(0)
    createdAt       DateTime      @default(now())
    widgetId        String
    widget          PriceWidget   @relation(fields: [widgetId], references: [id], onDelete: Cascade)
    @@unique([env, widgetId])
}

model CheckoutRecord {
    id                    String          @id @default(cuid())
    sessionId             String
    userId                String
    widgetId              String
    productId             String
    priceId               String
    subscriptionId        String
    currrentPeriodStart   Int
    currentPeriodEnd      Int
    cancelAt              Int?
    cancelledAt           Int?
    cancellationDetails   String?
    createdAt             DateTime        @default(now())
    isActive              Boolean         @default(true)
    isPaying              Boolean         @default(false)
    widget                PriceWidget     @relation(fields: [widgetId], references: [id], onDelete: Cascade)
    user                  User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id              String   @id @default(cuid())
    sessionToken    String   @unique
    userId          String
    expires         DateTime
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                    String    @id @default(cuid())
    name                  String?
    email                 String?   @unique
    emailVerified         DateTime?
    image                 String?
    stripeKey             String?
    stripeAccount         String?
    stripeConnected       Boolean   @default(false)
    stripeCustomerId      String?
    role                  String?    @default("USER")
    accounts              Account[]
    sessions              Session[]
    widgets               PriceWidget[]
    checkoutRecords       CheckoutRecord[]
}

model VerificationToken {
    identifier     String
    token          String   @unique
    expires        DateTime

    @@unique([identifier, token])
}
