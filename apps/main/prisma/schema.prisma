// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model PriceWidget {
    id              String        @id @default(cuid())
    template        String
    usesUnitLabel   Boolean       @default(false)
    unitLabel       String?
    color           String
    recommended     String?
    subscribeLabel  String
    freeTrialLabel  String
    currency        String?
    products        Product[]
    callbacks       Callback[]
    userId          String
    user            User          @relation(fields: [userId], references: [id])
}

model Product {
    id              String        @id @default(cuid())
    prices          Price[]
    isCustom        Boolean       @default(false)
    name            String?
    description     String?
    ctaLabel        String?
    ctaUrl          String?
    features        Feature[]
    widgetId        String?
    widget          PriceWidget?  @relation(fields: [widgetId], references: [id])
}

model Price {
    id              String        @id @default(cuid())
    productId       String
    hasFreeTrial    Boolean       @default(false)
    freeTrialDays   Int           @default(0)
    product         Product       @relation(fields: [productId], references: [id])
}

model Feature {
    id              String        @id @default(cuid())
    name            String
    type            String
    value           String
    productId       String
    product         Product       @relation(fields: [productId], references: [id])
}

model Callback {
    id              String        @id @default(cuid())
    env             String
    url             String
    widgetId        String
    widget          PriceWidget   @relation(fields: [widgetId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id              String   @id @default(cuid())
    sessionToken    String   @unique
    userId          String
    expires         DateTime
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    phone           String?
    address         String?
    website         String?
    stripeKey       String?
    accounts        Account[]
    sessions        Session[]
    widgets          PriceWidget[]
}

model VerificationToken {
    identifier     String
    token          String   @unique
    expires        DateTime

    @@unique([identifier, token])
}
